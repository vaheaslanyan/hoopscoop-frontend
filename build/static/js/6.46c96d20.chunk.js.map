{"version":3,"sources":["places/pages/UserPlaces.js"],"names":["UserPlaces","useState","loadedPlaces","setLoadedPlaces","useHttpClient","isLoading","error","sendRequest","clearError","userId","useParams","useEffect","a","process","REACT_APP_BACKEND_URL","responseData","places","fetchPlaces","Fragment","onClear","className","items","onDeletePlace","deletedPlaceId","prevPlaces","filter","place","id"],"mappings":"uMAkDeA,UAxCI,WAAO,IAAD,EACiBC,qBADjB,mBAChBC,EADgB,KACFC,EADE,OAG+BC,cAA9CC,EAHe,EAGfA,UAAWC,EAHI,EAGJA,MAAOC,EAHH,EAGGA,YAAaC,EAHhB,EAGgBA,WAEjCC,EAASC,cAAYD,OAE3BE,qBAAU,YACS,uCAAG,4BAAAC,EAAA,+EAEWL,EACzBM,8CAAYC,sBAAZ,uBAAoDL,IAHtC,OAEVM,EAFU,OAKhBZ,EAAgBY,EAAaC,QALb,uGAAH,qDAQjBC,KACC,CAACV,EAAaE,IAQjB,OACE,kBAAC,IAAMS,SAAP,KACE,kBAAC,IAAD,CAAYZ,MAAOA,EAAOa,QAASX,IAClCH,GACC,yBAAKe,UAAU,UACb,kBAAC,IAAD,QAGFf,GAAaH,GACb,kBAAC,IAAD,CAAWmB,MAAOnB,EAAcoB,cAfV,SAAAC,GAC1BpB,GAAgB,SAAAqB,GAAU,OACxBA,EAAWC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,KAAOJ","file":"static/js/6.46c96d20.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"; //useEffect to make sure we send the request when the component renders but not when it re-renders\nimport { useParams } from \"react-router-dom\";\n\nimport PlaceList from \"../components/PlaceList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\n//hooks\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState();\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId; // grabbing the :userId from our router\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + `/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeletedHandler = deletedPlaceId => {\n    setLoadedPlaces(prevPlaces =>\n      prevPlaces.filter(place => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}