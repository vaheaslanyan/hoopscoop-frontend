{"version":3,"sources":["shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","places/pages/UpdatePlace.js"],"names":["VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouched","Input","props","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","UpdatePlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeId","useParams","history","useHistory","title","description","inputHandler","setFormData","a","process","REACT_APP_BACKEND_URL","responseData","place","fetchPlace","placeUpdateSubmitHandler","preventDefault","JSON","stringify","Authorization","token","push","userId","Fragment","onClear","onSubmit","disabled"],"mappings":"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","file":"static/js/5.1ad110b5.chunk.js","sourcesContent":["const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\nconst VALIDATOR_TYPE_MIN = \"MIN\";\nconst VALIDATOR_TYPE_MAX = \"MAX\";\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\nconst VALIDATOR_TYPE_FILE = \"FILE\";\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from \"react\"; //useReducer is like useState but for more complex interconnected states\n\nimport \"./Input.css\";\nimport { validate } from \"../../util/validators\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state, // spread operator that copies the old state object with its key value pairs intpo the new object\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case \"TOUCH\": {\n      return {\n        ...state,\n        isTouched: true\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false\n  }); //the second argument is optional and it sets up an initail state\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(props.id, inputState.value, inputState.isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        value={inputState.value}\n        onBlur={touchHandler} //is triggered when the user has clicked on the element and then clicked away\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        value={inputState.value}\n        onBlur={touchHandler}\n      />\n    );\n  return (\n    <div\n      className={`form-control ${!inputState.isValid &&\n        inputState.isTouched &&\n        \"form-control--invalid\"}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue; //if the state is undefined then it will just skip that input\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback(\n    (id, value, isValid) => {\n      dispatch({\n        type: \"INPUT_CHANGE\",\n        value: value,\n        isValid: isValid,\n        inputId: id\n      });\n    },\n    [dispatch]\n  ); //useCallback is used to avoid an inifinite loop this code might create through use of dependenices\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport \"./PlaceForm.css\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from \"../../shared/util/validators\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\n//hooks\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    // here we are using our custom hook and destructuring the parameters [in the square brackets] so that we can use the below\n    {\n      title: {\n        value: \"\",\n        isValid: false\n      },\n      description: {\n        value: \"\",\n        isValid: false\n      }\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + `/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true\n            }\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + `/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token //Bearer at the begining is what we set to expect and is just a convention\n        }\n      );\n      history.push(\"/\" + auth.userId + \"/places\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}